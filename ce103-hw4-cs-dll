using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ce103_hw4_cs_dll
{
    public class ce103myfunctions
    {
        public int ce103_fibonacciNumber_cs(int fiIndex)
        {
            int first = 0, second = 1, third = 0;    //*we defined values.

            for (int i = 2; i < fiIndex; i++)       //*works until it's not true.
            {
                
                third = first + second;      //*we add the first and the second and equate them to the third value.
                first = second;          //*we equate first to the second value.
                second = third;          //*we equate second to the third value.

            }

            return third;     //*return third.
        }

        public string ce103_strrev_cs(string stringInput)
        {
            //* Reverse using While loop.
            string reverse_string = "";    //*we defined reverse_string value.
            int length;  //*we defined length value.

            length = stringInput.Length - 1;

            while (length >= 0)        //*if it is true, it goes into this loop.
            {
                reverse_string = reverse_string + stringInput[length];
                length--;
            }
            return reverse_string;

        }

        public int ce103_strlen_cs(string fiStr)
        {
            int c = 0;  //*we defined c value.

            while (c != fiStr.Length)          //*if it is true, it goes into this loop.
            {
                c++;      //*increase c by 1.
            }

            return c;   //*return c.
        }
       
        public string ce103_strcat_cs(string fiDest, string fiSrc)
        {
            string c = string.Empty;    //*we defined values.
            int i, j, L1, L2;   //*we defined values.
            L1 = fiDest.Length;   //*we defined values.
            L2 = fiSrc.Length;     //*we defined values.
            for (i = 0; i < L1; i++)         //*works until it's not true.
            {
                c = c + fiDest[i];
            }
            for (j = 0; j < L2; j++)        //*works until it's not true.
            {
                c = c + fiSrc[j];
            }
            return c;          //*return c.
        }

        public int ce103_strcmp_cs(string fiLhs, string fiRhs)
        {
            int str1 = 0, str2 = 0;    //*we defined values.
            for (int i = 0; i < (fiLhs.Length > fiRhs.Length ? fiLhs.Length : fiRhs.Length); i++)     //works until it's not true.
            {
                str1 += (i >= fiLhs.Length ? 0 : fiLhs[i]) - (i >= fiRhs.Length ? 0 : fiRhs[i]);
                if (str2 < 0)      //*if it is true, it goes into this loop.
                {
                    if (str1 < 0)     //*if it is true, it goes into this loop.
                        str2 += str1;
                    if (str1 > 0)       //*if it is true, it goes into this loop.
                        str2 += -str1;
                }
                else               //*if it is not true, it goes into this loop.
                {
                    str2 += str1;
                }
            }
            return str2;  //*return str2.
        }

        public string ce103_strcpy_cs(string foDestination, string fiSource)
        {
            //* declare and initialize destination array.
            char[] destArr = new char[fiSource.Length];

            //* convert source string to char array.
            char[] srcArr = fiSource.ToCharArray();

            //* copy string to other.
            for (int i = 0; i < fiSource.Length; i++)
            {
                destArr[i] = srcArr[i];
            }

            //* transfer string to temp string.
            string tempDest = new string(destArr);

            //* change foDestination string.
            foDestination = tempDest;

            return foDestination;   //return foDestination.
        }

        public void ce103_hex2bin_cs(string fiHex, int fiHexLen, byte[] foBin)
        {
            //*char[] foBinArr = new char[fiHexLen / 2];

            int[] count = { 0, 0 };  // count array for storing ascii and hex value of selected element .
            for (int i = 0; i < fiHexLen; i += 2)
            {  //* array for assigning foBin elements.
                char[] temp = new char[2];  // store two character from fiHex func.
                int hexint = 0;  // hexint stores sum of two ascii values generated from hex base.
                for (int j = 0; j < 2; j++)
                {  //* for loop for calculating sum of ascii values.
                    temp[j] = (char)fiHex[i + j];  // assigning first fiHex element to temp.
                    if (j == 0)
                    {  //* if j == 0 meaning first element of temp.
                       //* if and else if code snippet is taken from below website and fixed.
                       //* https://nachtimwald.com/2017/09/24/hex-encode-and-decode-in-c/
                        if (temp[j] >= '0' && temp[j] <= '9')
                        {  //* bounds
                            count[j] = temp[j] - '0';  //* find int value of nibble.
                            count[j] *= 16;  //* multiply by 16 because of 16^1*hex digit.
                        }
                        else if (temp[j] >= 'A' && temp[j] <= 'F')
                        {  //* bounds.
                            count[j] = temp[j] - 'A' + 10;  //* take difference between temp and 'A' then plus 10.
                            count[j] *= 16;
                        }
                    }
                    else
                    {  //* means 1
                        if (temp[j] >= '0' && temp[j] <= '9')
                        {
                            count[j] = temp[j] - '0';  //* we're not multiplying by 16 because it's 16^0 digit.
                        }
                        else if (temp[j] >= 'A' && temp[j] <= 'F')
                        {
                            count[j] = temp[j] - 'A' + 10;
                        }
                    }
                    hexint += count[j];  //* get two digit value's sum and assign it to hexint.
                }
                foBin[i / 2] = (byte)hexint;  //* assigning summed values to foBin.
            }
        }

        public void ce103_bin2hex_cs(byte[] fiBin, int fiBinLen, char[] foHex)
        {
            //*char[] foHexArr = new char[fiBinLen * 2];
            //*foHexArr = foHex.ToCharArray();
            char[] arr = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
            //* below code snippet is taken from
            //* https://nachtimwald.com/2017/09/24/hex-encode-and-decode-in-c/
            //* basically this for loop gets hex number's right or left nibble and finds which character is this.
            for (int i = 0; i < fiBinLen; i++)
            {
                foHex[i * 2] = arr[fiBin[i] >> 4];  //* it means divide by 16. arr[fiBin[i] / 16] is true also.
                foHex[i * 2 + 1] = arr[fiBin[i] & 0x0F];  //* if i = 0 then fiBin[0] & 0x0f Note: fiBin[0] = 0x13.
            }                                             //* 0001 0011 & 0000 1111 = 3 basically it means.
                                                          //* get hexnumber's second .
        }
    }
}
